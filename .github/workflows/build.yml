name: Build Ktools
on:
  push:

  # For manual trigged builds
  workflow_dispatch:
    inputs:
      create_ktools_builder:
        description: 'Rebuild the "coreoasis/ktools-builder:latest" image and push to docker hub, Options: [true, false]'
        required: true
        default: false

  # For reusable workflows
  workflow_call:
    inputs:
      create_ktools_builder:
        description: 'Rebuild the "coreoasis/ktools-builder:latest" image and push to docker hub, Options: [true, false]'
        required: true
        default: false
        type: string
      ktools_branch:
        description: 'For Remote calls, override the ktools branch with value'
        required: false
        type: string


env:
  CREATE_KTOOLS_BUILDER: "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.create_ktools_builder || 'false' }}"
  IMAGE_KTOOLS_BUILDER: "coreoasis/ktools-builder"
  TAG_KTOOLS_BUILDER: "latest"
  KTOOLS_BRANCH: ${{ github.ref_name }}

jobs:
  build-osx:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Set input - ktools_branch
    if: inputs.ktools_branch != ''
    run: echo "KTOOLS_BRANCH=${{ inputs.ktools_branch }}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ env.KTOOLS_BRANCH }}

    - name: (MacOS) Install dependencies
      run: |
        ln -s /usr/bin/shasum5.18 /usr/local/bin/sha1sum
        brew install \
            autoconf \
            automake \
            libtool \
            zlib-ng

    - name: (MacOS) Build ktools x86
      run: |
        BIN_TARGET=$(pwd)/x86
        ./autogen.sh
        ./configure --enable-osx --enable-o3 --prefix=$BIN_TARGET
        make check
        make install

    - name: Tarball bin files
      run: |
        cd ./x86/bin
        tar -zcvf ${{ github.workspace }}/Darwin_x86_64.tar.gz ./

    - name: 'Upload Ktool binaries - x86'
      uses: actions/upload-artifact@v3
      with:
        name: Darwin_x86_64
        path: Darwin_x86_64.tar.gz
        retention-days: 5

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Set input - ktools_branch
    if: inputs.ktools_branch != ''
    run: echo "KTOOLS_BRANCH=${{ inputs.ktools_branch }}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ env.KTOOLS_BRANCH }}

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: pull latest ktools builder
      if: env.CREATE_KTOOLS_BUILDER == 'false'
      run: |
        docker pull ${{ env.IMAGE_KTOOLS_BUILDER }}:${{ env.TAG_KTOOLS_BUILDER }}

    - name: Create new build image (optional)
      if: env.CREATE_KTOOLS_BUILDER == 'true'
      run: |
        docker build -f build/Dockerfile.clang-build -t ${{ env.IMAGE_KTOOLS_BUILDER }}:${{ env.TAG_KTOOLS_BUILDER }} .
        docker push ${{ env.IMAGE_KTOOLS_BUILDER }}:${{ env.TAG_KTOOLS_BUILDER }}

    - name: Build with Autotools
      working-directory: ${{ github.workspace }}
      run: |
        docker run --entrypoint build-autotools.sh -v $(pwd):/var/ktools ${{ env.IMAGE_KTOOLS_BUILDER }}:${{ env.TAG_KTOOLS_BUILDER }}
        ls -la ./tar

    - name: Build with Cmake
      working-directory: ${{ github.workspace }}
      run: |
        docker run --entrypoint build-cmake.sh -v $(pwd):/var/ktools ${{ env.IMAGE_KTOOLS_BUILDER }}:${{ env.TAG_KTOOLS_BUILDER }}
        ls -la ./tar

    - name: 'Store Linux build'
      uses: actions/upload-artifact@v3
      with:
        name: Linux_x86_64
        path: ./tar/Linux_x86_64.tar.gz
        retention-days: 5








# --- Alternative method, allways run a build but with cache --------
#
#  Desc: cached build runs in 2-3mins but is probably not needed
#       https://github.com/docker/build-push-action
#       https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md
#
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v2
#
#    - name: Cache Docker layers
#      uses: actions/cache@v3
#      with:
#        path: /tmp/.buildx-cache
#        key: ${{ runner.os }}-buildx-${{ github.sha }}
#        restore-keys: |
#          ${{ runner.os }}-buildx-
#    - name: Create ktools-builder
#      uses: docker/build-push-action@v3
#      with:
#        push: false  # push image to remote reg
#        load: true   # load docker image as local image
#        context: .
#        tags: ktools-builder:latest
#        file: build/Dockerfile.clang-build
#        #outputs: type=docker,dest=/tmp/myimage.tar
#        cache-from: type=local,src=/tmp/.buildx-cache
#        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
#
#    # Temp fix
#    # https://github.com/docker/build-push-action/issues/252
#    # https://github.com/moby/buildkit/issues/1896
#    - name: Move cache
#      run: |
#        rm -rf /tmp/.buildx-cache
#        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
# ----------------------------------------------------------------
#    - name: Build with Autotools
#      uses: addnab/docker-run-action@v3
#      with:
#        image: ktools-builder:latest
#        #shell: bash
#        run: ./build-autotools.sh
#        #options: -v ${{ github.workspace }}:/var/ktools
#
#    - name: Build with Cmake
#      uses: addnab/docker-run-action@v3
#      with:
#        image: ktools-builder:latest
#        #shell: bash
#        options: -v ${{ github.workspace }}:/var/ktools
#        run: ./build-cmake.sh

